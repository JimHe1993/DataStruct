'''
并查集——基于 rank 的优化
'''

__author__ = 'Jim He'

import time
import random


class UnionFindRank(object):
    def __init__(self, n):
        self.__parent = [i for i in range(n)]
        self.__count = n
        self.__rank = [1] * n  # 初始化每个元素都是一棵树，自己就是树根，高度为1

    def find(self, p):
        assert 0 <= p <= self.__count

        while p != self.__parent[p]:
            p = self.__parent[p]

        return p

    def is_connected(self, p, q):
        assert 0 <= p <= self.__count
        assert 0 <= q <= self.__count

        return self.find(p) == self.find(q)

    def union(self, p, q):
        assert 0 <= p <= self.__count
        assert 0 <= q <= self.__count

        p_root = self.find(p)
        q_root = self.find(q)

        if p_root == q_root:
            return

        # 高度小的树融入高度大的树
        if self.__rank[p_root] < self.__rank[q_root]:
            self.__parent[p_root] = q_root
        elif self.__rank[p_root] > self.__rank[q_root]:
            self.__parent[q_root] = p_root
        else:
            self.__parent[q_root] = p_root
            self.__rank[p_root] += 1

    def get_parent(self):
        return self.__parent


if __name__ == "__main__":
    # qu = UnionFindRank(10)
    qu = UnionFindRank(1000000)

    random.seed(0)
    start = time.time()
    # for _ in range(10):
    for _ in range(1000000):
        # a = random.randint(0, 9)
        # b = random.randint(0, 9)
        a = random.randint(0, 1000000 - 1)
        b = random.randint(0, 1000000 - 1)
        qu.union(a, b)
    # print('是否有进行连接：', qu.get_parent())
    # print(qu.is_connected(0, 4))
    # print(qu.is_connected(1, 3))
    end = time.time()
    print('时间：', end - start)  # 时间： 3.3041911125183105
