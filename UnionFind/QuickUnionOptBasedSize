'''
并查集——将小集合（元素个数）并入大集合(维护一个集合大小的列表)
'''

__author__ = 'Jim He'

import time
import random


class UnionFindOpt1(object):
    def __init__(self, n):
        self.__parent = [i for i in range(n)]
        self.__count = n
        self.__size = [1] * n  # 以i为根的集合中元素的个数，初始全为1

    def find(self, p):
        assert 0 <= p <= self.__count - 1

        while p != self.__parent[p]:
            p = self.__parent[p]
        return p

    def is_connected(self, p, q):
        assert 0 <= p <= self.__count - 1
        assert 0 <= q <= self.__count - 1

        return self.find(p) == self.find(q)

    def union(self, p, q):
        assert 0 <= p <= self.__count - 1
        assert 0 <= q <= self.__count - 1

        p_root = self.find(p)
        q_root = self.find(q)

        if p_root == q_root:
            return

        if self.__size[p_root] > self.__size[q_root]:
            self.__parent[q_root] = p_root
            self.__size[p_root] += self.__size[q_root]
        else:
            self.__parent[p_root] = q_root
            self.__size[q_root] += self.__size[p_root]

    def get_parent(self):
        return self.__parent


if __name__ == "__main__":
    # qu = UnionFindOpt1(10)
    qu = UnionFindOpt1(1000000)

    random.seed(0)
    start = time.time()
    # for _ in range(10):
    for _ in range(1000000):
        # a = random.randint(0, 9)
        # b = random.randint(0, 9)
        a = random.randint(0, 1000000 - 1)
        b = random.randint(0, 1000000 - 1)
        qu.union(a, b)
    # print('是否有进行连接：', qu.get_parent())
    # print(qu.is_connected(0, 4))
    # print(qu.is_connected(1, 3))
    end = time.time()
    print('时间：', end - start)  # 时间： 3.420886993408203
