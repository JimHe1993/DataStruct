'''
并查集——Quick Union
'''

__author__ = 'Jim He'

import time
import random


class QuickUnion(object):
    def __init__(self, n):
        self.__parent = [i for i in range(n)]  # 初始化每个元素的父节点是自己（互不连接）
        self.__count = n

    def find(self, p):
        '''
        找元素是属于哪一个集合的，查找每个元素的树的根（因为根代表了集合中的所有元素）
        :param p: 待查找元素
        :return: 元素所在集合的根
        '''
        assert 0 <= p <= self.__count - 1
        while p != self.__parent[p]:  # 某个元素是根则：p == self.__parent[p]
            p = self.__parent[p]
        return p

    def is_connected(self, p, q):
        '''
        看p, q是否相连（在同一个集合（同根即相连））
        :param p: 比较元素1
        :param q: 比较元素2
        :return: True 相连，False 不相连
        '''
        assert 0 <= p <= self.__count
        assert 0 <= q <= self.__count
        return self.find(p) == self.find(q)

    def union(self, p, q):
        '''
        将p, q合并为同一个根的集合
        :param p: 待合并元素1
        :param q: 待合并元素1
        '''
        assert 0 <= p <= self.__count
        assert 0 <= q <= self.__count

        p_root = self.find(p)
        q_root = self.find(q)

        if p_root == q_root:
            return

        self.__parent[q_root] = p_root

    def get_parent(self):
        return self.__parent


if __name__ == "__main__":
    # qu = QuickUnion(10)
    qu = QuickUnion(10000)

    random.seed(0)
    start = time.time()
    # for _ in range(10):
    for _ in range(10000):
        # a = random.randint(0, 9)
        # b = random.randint(0, 9)
        a = random.randint(0, 10000 - 1)
        b = random.randint(0, 10000 - 1)
        qu.union(a, b)
    # print('是否有进行连接：', qu.get_parent())
    # print(qu.is_connected(0, 4))
    # print(qu.is_connected(1, 3))
    end = time.time()
    print('时间：', end - start)
