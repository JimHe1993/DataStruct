'''
最小堆——列表实现
'''

__authors__ = 'Jim He'

import random


class MinHeap(object):
    def __init__(self, data=None):
        if data:
            len_data = len(data)
            self.__size = len_data
            self.__data = data[:]
            for k in range((len_data-2) // 2, -1, -1):
                self.__shift_down(self.__data, len_data, k)
        else:
            self.__data = []
            self.__size = 0

    def __str__(self):
        return str(self.__data)

    def is_empty(self):
        return self.__size == 0

    def len_heap(self):
        return self.__size

    def add(self, e):
        self.__data.append(e)
        self.__shift_up(self.__data, self.__size)
        self.__size += 1

    def __shift_up(self, heap, k):
        target = heap[k]
        while k >= 0:
            # if (k-1) // 2 >= 0 and heap[(k-1) // 2][2] > target[2]:
            if (k-1) // 2 >= 0 and heap[(k-1) // 2] > target:
                heap[k] = heap[(k-1) // 2]
                k = (k-1) // 2
            else:
                break
        heap[k] = target

    def get_min(self):
        if self.is_empty():
            return None
        min_pri = self.__data[0]
        if self.len_heap() == 1:
            self.__data.clear()
            self.__size -= 1
            return min_pri
        self.__data[0], self.__data[self.__size - 1] = self.__data[self.__size - 1], self.__data[0]
        del self.__data[self.__size - 1]
        self.__size -= 1
        self.__shift_down(self.__data, len(self.__data), 0)
        return min_pri

    def __shift_down(self, heap, len_heap, k):
        target = heap[k]
        while k < len_heap:
            i = 2*k + 1
            # if i + 1 < len_heap and heap[i][2] > heap[i+1][2]:
            if i + 1 < len_heap and heap[i] > heap[i+1]:
                i = i+1
            # if i < len_heap and heap[i][2] < target[2]:
            if i < len_heap and heap[i] < target:
                heap[k] = heap[i]
                k = i
            else:
                break
        heap[k] = target


if __name__ == "__main__":
    # 存储整数值已验证堆结构正确
    # min_heap = MinHeap()
    # print(min_heap.is_empty())
    # print(min_heap.len_heap())
    #
    # random.seed(0)
    # for _ in range(10):
    #     x = random.randint(1, 100)
    #     print(x, '->', end='')
    #     min_heap.add(x)
    # print()
    # print(min_heap)
    # print('最小值：', min_heap.get_min())
    # print(min_heap)
    #
    # print('-------------------------------------')
    # min_heap = MinHeap([50, 98, 54, 6, 34, 66, 63, 52, 39, 62])
    # print(min_heap)
    # min_heap.add(54)
    # print(min_heap)

    # 存储图中带权边
    pass
