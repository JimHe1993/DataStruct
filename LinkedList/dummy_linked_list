'''
带虚拟头节点的链表
'''

__author__ = 'Jim He'


class Node(object):
    def __init__(self, e=None, next_p=None):
        self.e = e
        self.next_p = next_p

    def __str__(self):
        return str(self.e)


class LinkedList(object):
    def __init__(self):
        self.__dummy_head = Node()
        self.__size = 0

    def get_size(self):
        return self.__size

    def is_empty(self):
        return self.__size == 0

    def add(self, loc, e):
        '''
        在第loc位置添加元素e
        :param loc: 位置
        :param e: 元素
        :return:
        '''
        assert 1 <= loc <= self.__size + 1, '位置不存在'
        prev = self.__dummy_head
        for _ in range(1, loc):
            prev = prev.next_p
        prev.next_p = Node(e, prev.next_p)
        self.__size += 1

    def add_first(self, e):
        self.add(1, e)

    def add_last(self, e):
        self.add(self.__size + 1, e)

    def get_element(self, loc):
        assert 1 <= loc <= self.__size + 1, '位置不存在'
        cur = self.__dummy_head.next_p
        for _ in range(1, loc):
            cur = cur.next_p
        return cur.e

    def get_first(self):
        return self.get_element(1)

    def get_last(self):
        return self.get_element(self.__size)

    def update(self, loc, e):
        assert 1 <= loc <= self.__size + 1, '位置不存在'
        cur = self.__dummy_head.next_p
        for _ in range(1, loc):
            cur = cur.next_p
        cur.e = e

    def contains(self, e):
        cur = self.__dummy_head.next_p
        while cur:
            if cur.e == e:
                return True
            cur = cur.next_p
        return False

    def remove(self, loc):
        assert 1 <= loc <= self.__size + 1, '位置不存在'
        prev = self.__dummy_head
        for _ in range(1, loc):
            prev = prev.next_p
        del_node = prev.next_p
        prev.next_p = del_node.next_p
        del_node_e = del_node.e
        del_node.next_p = None
        del del_node
        self.__size -= 1
        return del_node_e

    def remove_first(self):
        return self.remove(1)

    def remove_last(self):
        return self.remove(self.__size)

    def remove_element(self, e):
        prev = self.__dummy_head
        while prev.next_p:
            if prev.next_p.e == e:
                del_node = prev.next_p
                prev.next_p = del_node.next_p
                del_node.next_p = None
                del del_node
            else:
                prev = prev.next_p

    def __str__(self):
        ret = ''
        list_head = self.__dummy_head.next_p
        while list_head:
            ret += str(list_head)
            ret += '->'
            list_head = list_head.next_p
            if not list_head:
                ret += 'None'
        return ret


if __name__ == "__main__":
    linked_list = LinkedList()
    for i in range(6):
        linked_list.add(1, i)
        print(linked_list)
    print(linked_list.get_element(3))
    linked_list.update(3, 33)
    print(linked_list)
    print(linked_list.contains(333))
    linked_list.remove(3)
    print(linked_list)
    linked_list.remove_element(4)
    print(linked_list)
