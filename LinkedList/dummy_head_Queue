'''
使用虚拟节点的链表构建队列
'''

__authors__ = 'Jim He'


class Node(object):
    def __init__(self, e=None, next_p=None):
        self.e = e
        self.next_p = next_p

    def __str__(self):
        return str(self.e)


class LinkedListQueue(object):
    def __init__(self):
        self.__dummy_head = Node()
        self.__tail = None
        self.__size = 0

    def __str__(self):
        ret = ''
        ret += 'head:'
        cur = self.__dummy_head.next_p
        while cur:
            ret += str(cur.e)
            ret += '->'
            cur = cur.next_p
        ret += str(None)
        ret += ':tail'
        return ret

    def is_empty(self):
        return self.__size == 0

    def get_size(self):
        return self.__size

    def enqueue(self, e):
        if not self.__tail:
            self.__dummy_head.next_p = self.__tail = Node(e)
        else:
            self.__tail.next_p = Node(e)
            self.__tail = self.__tail.next_p
        self.__size += 1

    def dequeue(self):
        if not self.__dummy_head.next_p:
            return None
        del_node = self.__dummy_head.next_p
        self.__dummy_head.next_p = del_node.next_p
        if not self.__dummy_head.next_p:
            self.__tail = None
        del_node.next_p = None
        del_node_e = del_node.e
        del del_node
        self.__size -= 1
        return del_node_e

    def get_front(self):
        if self.__dummy_head.next_p:
            return self.__dummy_head.next_p.e
        else:
            return None


if __name__ == "__main__":
    queue = LinkedListQueue()
    for _ in range(10):
        queue.enqueue(_)

        if _ % 3 == 0:
            queue.dequeue()
        print(queue)
