'''
稠密图——邻接矩阵
'''

__authors__ = 'Jim He'

import random

from read_graph import ReadGraph
from Component import Component
from Path import Path
from ShortestPath import ShortestPath


class DenseGraph(object):
    def __init__(self, v, directed=False):
        assert v > 0, '图不能为空'
        self.__v = v
        self.__e = 0
        self.__directed = directed  # 是否为有向图
        # self.__graph = [[False] * self.__v] * self.__v  # 初始化错误
        self.__graph = []
        for _ in range(self.__v):
            self.__graph.append([False] * self.__v)

    def __str__(self):
        return str(self.__graph)

    def get_v(self):
        return self.__v

    def get_e(self):
        return self.__e

    def has_edge(self, v1, v2):
        assert 0 <= v1 <= self.__v - 1 and 0 <= v2 <= self.__v - 1, '顶点异常'
        return self.__graph[v1][v2]

    def add_edge(self, v1, v2):
        assert 0 <= v1 <= self.__v - 1 and 0 <= v2 <= self.__v - 1, '顶点异常'
        if self.has_edge(v1, v2):  # 屏蔽平行边
            return
        self.__graph[v1][v2] = True
        if not self.__directed and v1 != v2:
            self.__graph[v2][v1] = True
        self.__e += 1

    def adj(self, vv):
        assert 0 <= vv < self.__v, '顶点异常'
        res = []
        for idx, e in enumerate(self.__graph[vv]):
            if e:
                res.append(idx)
        return res

    def show(self):
        for v in range(self.__v):
            # print('第' + str(v) + '个顶点的边：', self.adj(v))
            v_e = self.__graph[v]
            for idx, val in enumerate(v_e):
                if val:
                    v_e[idx] = 1
                else:
                    v_e[idx] = 0
            print(v_e)


if __name__ == "__main__":
    # 基础测试
    # dense_graph = DenseGraph(3)
    # print(dense_graph)
    # print(dense_graph.has_edge(1, 2))
    # dense_graph.add_edge(1, 2)
    # print(dense_graph)

    # 压力测试
    # dense_graph = DenseGraph(20)
    # random.seed(0)
    # for _ in range(100):
    #     v1 = random.randint(0, 19)
    #     v2 = random.randint(0, 19)
    #     dense_graph.add_edge(v1, v2)
    # for v in range(20):  # O(V^2)
    #     print('第' + str(v) + '个顶点的边：', dense_graph.adj(v))

    # 图构建
    # dense_graph = DenseGraph(13)
    # read_dense_graph = ReadGraph(dense_graph, 'testG1.txt')
    # dense_graph.show()
    # component = Component(dense_graph)
    # print(component.get_component())
    # print(component.is_connected(6, 7))
    # path = Path(dense_graph, 0)
    # print(path.path(5))

    # dense_graph = DenseGraph(6)
    # read_dense_graph = ReadGraph(dense_graph, 'testG22.txt')
    # dense_graph.show()
    # component = Component(dense_graph)
    # print(component.get_component())
    # print(component.is_connected(3, 4))

    dense_graph = DenseGraph(7)
    read_dense_graph = ReadGraph(dense_graph, 'testG2.txt')
    dense_graph.show()
    component = Component(dense_graph)
    print('连通分量：', component.get_component())
    print(component.is_connected(3, 4))
    path = Path(dense_graph, 0)
    print('深度优先：', path.path(6))
    sp = ShortestPath(dense_graph, 0)
    print(sp.get_bfs())
    s_path = sp.shortest_path(6)
    print('广度优先最短路径：', s_path[0], '长度：', s_path[1])
